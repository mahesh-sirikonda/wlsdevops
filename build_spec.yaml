# Copyright (c) 2021 Oracle and/or its affiliates.
# 
# The Universal Permissive License (UPL), Version 1.0
# 
# Subject to the condition set forth below, permission is hereby granted to any
# person obtaining a copy of this software, associated documentation and/or data
# (collectively the "Software"), free of charge and under any and all copyright
# rights in the Software, and any and all patent rights owned or freely
# licensable by each licensor hereunder covering either (i) the unmodified
# Software as contributed to or provided by such licensor, or (ii) the Larger
# Works (as defined below), to deal in both
# 
# (a) the Software, and
# (b) any piece of software and/or hardware listed in the lrgrwrks.txt file if
# one is included with the Software (each a "Larger Work" to which the Software
# is contributed by such licensors),
# without restriction, including without limitation the rights to copy, create
# derivative works of, display, perform, and distribute the Software and make,
# use, sell, offer for sale, import, export, have made, and have sold the
# Software and the Larger Work(s), and to sublicense the foregoing rights on
# either these or other terms.
# 
# This license is subject to the following condition:
# The above copyright notice and either this complete permission notice or at
# a minimum a reference to the UPL must be included in all copies or
# substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash

env:
  # these are local variables to the build config, we need to declare them here so thet will follow on in subsequent build stages
  # Note that PATH seems to be automatically added to the list of variables who's value is preserved across commands
  variables:
   # HOLDINGPATH: "empty"
   JAVA_HOME: "javahome"

# For this to work the folloing params need to be set in the pipeline
# ignore for now GITHUB_PATH_SECRET_OCID - the OCID of the vault secret containing the users github parsonal access token
# ignore for now GITHUB_USERNAME = the OCID of the vault secret contining the users github usename
# OCIR_HOST - The hostname part of the image tags for the image registry to use 
# OCIR_STORAGE_NAMEPACE - The tenancy storage namespace part of the image tag
  vaultVariables:
    WLS_UID: ocid1.vaultsecret.oc1.phx.amaaaaaac7x6gxiajmuyqddfk2mvi7kskglthuk5gswgxlc2bxjlgvo2ttoa
    WLS_PWD: ocid1.vaultsecret.oc1.phx.amaaaaaac7x6gxiazd2jjjxa7jjhfyc5yg4t53e4zbbvc7sqnm3wqulmt3hq
    

steps:        
  - type: Command
    name: "Extract Export variables"
    timeoutInSeconds: 10
    command: |
      echo Path is
      echo $PATH
      echo JAVA_HOME is
      echo $JAVA_HOME
      export WLS_UID=$WLS_UID
      export WLS_PWD=$WLS_PWD
      cd ${OCI_PRIMARY_SOURCE_DIR}
      ls
      echo Extracting export variables - Working in `pwd`
      cd ${OCI_PRIMARY_SOURCE_DIR}      
      echo "DEPLOY_VERSION: " $DEPLOY_VERSION
      echo WLS_UID is $WLS_UID
      echo WLS_PWD is $WLS_PWD
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root
  - type: VulnerabilityAudit
    name: "Vulnerability Audit Step"
    configuration:
      buildType: maven
      pomFilePath: ${OCI_PRIMARY_SOURCE_DIR}/pom.xml 
      maxPermissibleCvssV2Score: 10.0
      maxPermissibleCvssV3Score: 10.0
    knowledgeBaseId: ocid1.admknowledgebase.oc1.phx.amaaaaaac7x6gxiajblqcdggdeo2vhvj223cinnbhwbnhhbilf4hgfaah4iq
    vulnerabilityAuditCompartmentId: ocid1.compartment.oc1..aaaaaaaaq5riyrdcspo6jk5jd3ujhqvzjuq237gfih6khmotg4foqtmlvjwa
    vulnerabilityAuditName: wlsjavareport
  - type: Command
    name: "Install local JDK"
    timeoutInSeconds: 1800
    command: |
      cd ~
      mkdir InstalledSoftware
      cd InstalledSoftware
      wget -q https://objectstorage.us-phoenix-1.oraclecloud.com/n/apacaseanset01/b/BJ_Public/o/jdk-8u341-linux-x64.tar.gz
      tar xf *tar.gz
      rm *tar.gz
      ls -l
      export JAVA_HOME=`echo -n ~/InstalledSoftware/jdk1.8*`
      export PATH=$JAVA_HOME/bin:$PATH
      echo Path is
      echo $PATH
      echo JAVA_HOME is
      echo $JAVA_HOME
      java -version
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root
        
  - type: Command
    name: "Confirm Variables and versions"
    timeoutInSeconds: 10
    command: |
      echo PATH is $PATH
      echo JAVA_HOME is $JAVA_HOME
      echo DEPLOY_VERSION is $DEPLOY_VERSION      
      echo OCI_PRIMARY_SOURCE_DIR is ${OCI_PRIMARY_SOURCE_DIR}
      echo This is the Java version, it should be Java 1.8
      java -version
      echo This is the maven version
      mvn -v 
    onFailure:
      - type: Command
        timeoutInSeconds: 40
        command: |
          echo "Handling Failure"
          echo "Failure successfully handled"
        timeoutInSeconds: 400
        runAs: root
        
  - type: Command
    name: "Build Source"
    timeoutInSeconds: 1800
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}
      echo Running maven package - Working in `pwd`
      mvn clean package

   
# This basically preserves and "names" the artifacts below (if it's not here it gets junked) so the deliver artifact stage can handle them
outputArtifacts:
  - name: wls_war
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/target/opdemo.war
  - name: wlst_py
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/manageApplication.py
  - name: wlst_sh
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/deployapp.sh
  - name: deployment_spec
    type: BINARY
    location: ${OCI_PRIMARY_SOURCE_DIR}/deployment_spec.yaml
    
    